#nullable enable
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Morpeh.BoilerplateGenerationProcessor.Tests;

[TestClass]
public class GeneratorTests
{
    private const string Stubs = @"
#nullable enable
namespace Unity.IL2CPP.CompilerServices
{
    using System;

    public enum Option
    {
        NullChecks,
        ArrayBoundsChecks,
        DivideByZeroChecks
    }

    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true, Inherited = false)]
    public sealed class Il2CppSetOptionAttribute : Attribute
    {
        public Il2CppSetOptionAttribute(Option option, object value) {}
    }
}

namespace Scellecs.Morpeh
{
    using System;

    public interface IComponent {}
    public interface ISystem {}
    public interface IInitializer {}
    public interface IFixedSystem {}
    public interface ILateSystem {}
    public interface ICleanupSystem {}
    public sealed class Filter {}
    public sealed class World {}
}
";

    // --------------------------------------------------------------------
    //  Helper for running generator tests
    // --------------------------------------------------------------------
    private static async Task RunGeneratorTestAsync(
        string source,
        (string filename, string content)? expectedGeneratedSource = null,
        IEnumerable<DiagnosticResult>? expectedDiagnostics = null)
    {
        var test = new CSharpSourceGeneratorTest<
            AttributeGenerator,
            DefaultVerifier>
        {
            TestState =
            {
                // Put the actual test source first so it's always Test0.cs
                Sources = { source, Stubs },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net60
            }
        };

        if (expectedGeneratedSource is not null)
            test.TestState.GeneratedSources.Add((
                typeof(AttributeGenerator),
                expectedGeneratedSource.Value.filename,
                expectedGeneratedSource.Value.content));

        if (expectedDiagnostics is not null) test.TestState.ExpectedDiagnostics.AddRange(expectedDiagnostics);

        await test.RunAsync();
    }

    // --------------------------------------------------------------------
    //  TESTS
    // --------------------------------------------------------------------

    [TestMethod]
    public async Task ComponentMissingPartial_ShouldGenerateWarning()
    {
        var source = @"
using Scellecs.Morpeh;

namespace Game
{
    public struct MyComponent : IComponent
    {
        public int Value;
    }
}";

        DiagnosticResult expectedDiagnostic = DiagnosticResult
            .CompilerWarning("MORPEH001")
            .WithSpan("/0/Test0.cs", 6, 19, 6, 30)
            .WithArguments("MyComponent");

        await RunGeneratorTestAsync(source, expectedDiagnostics: new[] { expectedDiagnostic });
    }

    [TestMethod]
    public async Task PartialComponent_ShouldGenerateAttributes()
    {
        var source = @"
using Scellecs.Morpeh;

namespace Game
{
    public partial struct MyComponent : IComponent
    {
        public int Value;
    }
}";

        var expectedGenerated = @"// <auto-generated/>
#nullable enable
#pragma warning disable

namespace Game
{
    [global::System.Serializable]
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.NullChecks, false)]
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false)]
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
    public partial struct MyComponent
    {
    }
}
";

        await RunGeneratorTestAsync(source, ("MyComponent.g.cs", expectedGenerated));
    }

    [TestMethod]
    public async Task EmptyInput_ShouldNotProduceOutput()
    {
        const string source = "";

        await RunGeneratorTestAsync(source);
    }

    [TestMethod]
    public async Task SystemWithoutPartial_ShouldGenerateWarning()
    {
        var source = @"
using Scellecs.Morpeh;

namespace Game
{
    public class MySystem : ISystem
    {
    }
}";

        DiagnosticResult expectedDiagnostic = DiagnosticResult
            .CompilerWarning("MORPEH001")
            .WithSpan("/0/Test0.cs", 6, 18, 6, 26)
            .WithArguments("MySystem");

        await RunGeneratorTestAsync(source, expectedDiagnostics: new[] { expectedDiagnostic });
    }

    [TestMethod]
    public async Task PartialSystem_ShouldGenerateAttributes()
    {
        var source = @"
using Scellecs.Morpeh;

namespace Game
{
    public partial class MySystem : ISystem
    {
    }
}";

        var expectedGenerated = @"// <auto-generated/>
#nullable enable
#pragma warning disable

namespace Game
{
    [global::System.Serializable]
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.NullChecks, false)]
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false)]
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
    public partial class MySystem
    {
    }
}
";

        await RunGeneratorTestAsync(source, ("MySystem.g.cs", expectedGenerated));
    }

    [TestMethod]
    public async Task PartialNonMorpehType_ShouldNotGenerateAnything()
    {
        var source = @"
namespace Game
{
    public partial class NotAMorpehThing
    {
    }
}";
        await RunGeneratorTestAsync(source);
    }

    [TestMethod]
    public async Task PartialComponentWithAllAttributes_ShouldNotGenerateAnything()
    {
        var source = @"
using Scellecs.Morpeh;
using Unity.IL2CPP.CompilerServices;
using System;

namespace Game
{
    [Serializable]
    [Il2CppSetOption(Option.NullChecks, false)]
    [Il2CppSetOption(Option.ArrayBoundsChecks, false)]
    [Il2CppSetOption(Option.DivideByZeroChecks, false)]
    public partial struct MyComponent : IComponent
    {
        public int Value;
    }
}";
        await RunGeneratorTestAsync(source);
    }

    [TestMethod]
    public async Task PartialComponentWithSomeAttributes_ShouldGenerateMissingAttributes()
    {
        var source = @"
using Scellecs.Morpeh;
using Unity.IL2CPP.CompilerServices;
using System;

namespace Game
{
    [Serializable]
    [Il2CppSetOption(Option.NullChecks, false)]
    public partial struct MyComponent : IComponent
    {
        public int Value;
    }
}";

        var expectedGenerated = @"// <auto-generated/>
#nullable enable
#pragma warning disable

namespace Game
{
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false)]
    [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
    public partial struct MyComponent
    {
    }
}
";

        await RunGeneratorTestAsync(source, ("MyComponent.g.cs", expectedGenerated));
    }

    [TestMethod]
    public async Task NestedPartialComponent_ShouldGenerateCorrectly()
    {
        var source = @"
using Scellecs.Morpeh;

namespace Game
{
    public partial class OuterClass
    {
        public partial struct NestedComponent : IComponent
        {
            public int Value;
        }
    }
}";

        var expectedGenerated = @"// <auto-generated/>
#nullable enable
#pragma warning disable

namespace Game
{
    public partial class OuterClass
    {
        [global::System.Serializable]
        [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.NullChecks, false)]
        [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false)]
        [global::Unity.IL2CPP.CompilerServices.Il2CppSetOption(global::Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
        public partial struct NestedComponent
        {
        }
    }
}
";

        await RunGeneratorTestAsync(source, ("OuterClass.NestedComponent.g.cs", expectedGenerated));
    }

    [TestMethod]
    public async Task PartialStructWithoutIComponent_ShouldGenerateInfoDiagnostic()
    {
        var source = @"
namespace Game
{
    public partial struct PotentialComponent
    {
    }
}";

        DiagnosticResult expectedDiagnostic = new DiagnosticResult("MORPEH003", DiagnosticSeverity.Info)
            .WithSpan("/0/Test0.cs", 4, 27, 4, 45)
            .WithArguments("PotentialComponent");

        await RunGeneratorTestAsync(source, expectedDiagnostics: new[] { expectedDiagnostic });
    }
}